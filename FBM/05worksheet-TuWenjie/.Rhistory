geom_density(alpha=0.2) +
theme_minimal()
ggplot(d.mcmc) +
geom_density(alpha=0.2) +
theme_minimal()
ggplot(d.mcmc, aes(x=ResponseRate, y=..density..)) +
geom_density(alpha=0.2) +
theme_minimal()
ggplot(d.mcmc, aes(x=ResponseRate, y=..density..)) +
geom_density(color=5, fill=5, alpha=0.2) +
theme_minimal()
ggplot(d.mcmc, aes(x=ResponseRate, y=..density.., fill=chainType, color=chainType)) +
geom_density(alpha=0.2) +
theme_minimal()
ggplot(d.mcmc, aes(x=ResponseRate, y=..density.., fill=chainType, color=chainType)) +
geom_density(alpha=0.2) + labs(title="Density of p_new", y="Density") + theme_minimal()
library(ggplot2)
ggplot(data.frame(Difference=d), aes(x=Difference, y=..density..)) +
geom_histogram(position="identity", bins=50, alpha=0.2, color="white", fill=4) +
geom_density(alpha=0.2, color=4) + geom_vline(xintercept=0, color=2) + theme_minimal() +
labs(title="Histogram/density of the response rate difference", y="Density")
ggplot(with(density(d), data.frame(x, y)), aes(x=x, y=y)) +
geom_area(aes(x=ifelse(x>0, x, 0), y=y), fill=4, alpha=0.2) +
geom_line(color=4) + geom_vline(xintercept=0, color=2) +
labs(title="Density plot of response rate difference", x="Difference", y="Density") +
geom_text(aes(x=0.3, y=0.3), label="P(RDD>0)", color=4, check_overlap=TRUE) +
ylim(0, 2) + theme_minimal()
mean(d>0)
sqrt(var(d>0)/M)
q()
knitr::opts_chunk$set(echo = TRUE)
setwd("F:/UZH/22Spring/FBM/Session9/05worksheet-TuWenjie")
Sys.setenv(lang="us_en")
rm(list=ls())
pl_total <- c(107, 44, 51, 39, 139, 20, 78, 35)
pl_case <- c(23, 12, 19, 9, 39, 6, 9, 10)
## Logit-transformation
pl_y <- log(pl_case / (pl_total - pl_case))
## Standard error
pl_se <- sqrt(1/pl_case + 1/(pl_total - pl_case))
prec_s <- 1 / pl_se^2
library(rjags)
library(coda)
library(ggplot2)
dat.jags <- list(y=pl_y, prec_s=prec_s)
inits.jags <- list(list(.RNG.name="base::Wichmann-Hill", .RNG.seed=314159),
list(.RNG.name="base::Marsaglia-Multicarry", .RNG.seed=159314),
list(.RNG.name="base::Super-Duper", .RNG.seed=413159),
list(.RNG.name="base::Mersenne-Twister", .RNG.seed=143915))
model.jags <- jags.model(
file = "MetaAnalysis.txt",
data = dat.jags,
inits = inits.jags,
n.chains = 4,
n.adapt = 4000
)
## Burn-in
update(model.jags, n.iter = 4000)
## Sampling
fit.jags.coda <- coda.samples(
model = model.jags,
variable.names = c("p_new"),
n.iter = 10000,
thin = 1
)
summary(fit.jags.coda)
estBetaParams <- function(mean, var) {
alpha <- ((1 - mean) / var - 1 /mean) * mean ^ 2
beta <- alpha * (1 / mean - 1)
return(params = c(alpha=alpha, beta=beta))
}
estBetaParams <- function(mean, var) {
alpha <- ((1 - mean) / var - 1 /mean) * mean ^ 2
beta <- alpha * (1 / mean - 1)
return(params = c(alpha=alpha, beta=beta))
}
mu <- d.summary$Mean
d.summary <- data.frame(t(rbind(
colMeans(m.fit.jags.coda),
apply(m.fit.jags.coda, 2, function(x) sd(x)),
apply(m.fit.jags.coda, 2, function(x) quantile(x, probs=c(0.025, 0.5, 0.975)))
)))
## Concatenate 4 chains
m.fit.jags.coda <- as.matrix(fit.jags.coda)
d.summary <- data.frame(t(rbind(
colMeans(m.fit.jags.coda),
apply(m.fit.jags.coda, 2, function(x) sd(x)),
apply(m.fit.jags.coda, 2, function(x) quantile(x, probs=c(0.025, 0.5, 0.975)))
)))
colnames(d.summary) <- c("Mean", "SD", "2.5%", "Median", "97.5%")
knitr::kable(d.summary, digits=5, align="c", caption="Summary statistics")
estBetaParams(mean=d.summary$Mean, d.summary$SD^2)
q()
knitr::opts_chunk$set(echo = TRUE)
setwd("F:/UZH/22Spring/FBM/Session9/05worksheet-TuWenjie")
Sys.setenv(lang="us_en")
rm(list=ls())
pl_total <- c(107, 44, 51, 39, 139, 20, 78, 35)
pl_case <- c(23, 12, 19, 9, 39, 6, 9, 10)
## Logit-transformation
pl_y <- log(pl_case / (pl_total - pl_case))
## Standard error
pl_se <- sqrt(1/pl_case + 1/(pl_total - pl_case))
prec_s <- 1 / pl_se^2
library(rjags)
library(coda)
library(ggplot2)
dat.jags <- list(y=pl_y, prec_s=prec_s)
inits.jags <- list(list(p_new=0.1, .RNG.name="base::Wichmann-Hill", .RNG.seed=314159),
list(p_new=0.5, .RNG.name="base::Marsaglia-Multicarry", .RNG.seed=159314),
list(p_new=0.7, .RNG.name="base::Super-Duper", .RNG.seed=413159),
list(p_new=0.9, .RNG.name="base::Mersenne-Twister", .RNG.seed=143915))
model.jags <- jags.model(
file = "MetaAnalysis.txt",
data = dat.jags,
inits = inits.jags,
n.chains = 4,
n.adapt = 4000
)
dat.jags <- list(y=pl_y, prec_s=prec_s)
inits.jags <- list(list(.RNG.name="base::Wichmann-Hill", .RNG.seed=314159),
list(.RNG.name="base::Marsaglia-Multicarry", .RNG.seed=159314),
list(.RNG.name="base::Super-Duper", .RNG.seed=413159),
list(.RNG.name="base::Mersenne-Twister", .RNG.seed=143915))
model.jags <- jags.model(
file = "MetaAnalysis.txt",
data = dat.jags,
inits = inits.jags,
n.chains = 4,
n.adapt = 4000
)
## Burn-in
update(model.jags, n.iter = 4000)
## Sampling
fit.jags.coda <- coda.samples(
model = model.jags,
variable.names = c("p_new"),
n.iter = 10000,
thin = 1
)
summary(fit.jags.coda)
plot(fit.jags.coda)
## Concatenate 4 chains
m.fit.jags.coda <- as.matrix(fit.jags.coda)
d.mcmc <- data.frame(
Iterations = rep(4001:14000, times=4),
ResponseRate = m.fit.jags.coda[, "p_new"],
chainType = rep(c("chain1", "chain2", "chain3", "chain4"), each=10000)
)
ggplot(d.mcmc, aes(x=Iterations, y=ResponseRate, color=chainType)) +
geom_line(alpha=0.5) + theme_minimal() +
labs(title="Trace of p_new")
ggplot(d.mcmc, aes(x=ResponseRate, y=..density.., fill=chainType, color=chainType)) +
geom_density(alpha=0.2) + labs(title="Density of p_new", y="Density") + theme_minimal()
ggplot(d.mcmc, aes(x=ResponseRate, y=..density..)) +
geom_density(alpha=0.2) + labs(title="Density of p_new", y="Density") + theme_minimal()
ggplot(d.mcmc, aes(x=ResponseRate, y=..density..)) +
geom_density(alpha=0.2, color="darkblue", fill="lightblue") + labs(title="Density of p_new", y="Density") + theme_minimal()
View(d.mcmc)
ggplot(d.mcmc, aes(x=1:nrow(d.mcmc), y=ResponseRate)) +
geom_line(alpha=0.5) + theme_minimal() +
labs(title="Trace of p_new")
ggplot(d.mcmc, aes(x=ResponseRate, y=..density..)) +
geom_density(alpha=0.2, color="darkblue", fill="lightblue") +
labs(title="Density of p_new", y="Density") + theme_minimal()
ggplot(d.mcmc, aes(x=1:nrow(d.mcmc), y=ResponseRate, color=chainType)) +
geom_line(alpha=0.5) + theme_minimal() +
labs(title="Trace of p_new")
d.summary <- data.frame(t(rbind(
colMeans(m.fit.jags.coda),
apply(m.fit.jags.coda, 2, function(x) sd(x)),
apply(m.fit.jags.coda, 2, function(x) quantile(x, probs=c(0.025, 0.5, 0.975)))
)))
colnames(d.summary) <- c("Mean", "SD", "2.5%", "Median", "97.5%")
knitr::kable(d.summary, digits=5, align="c", caption="Summary statistics")
?jags.model
?coda.samples
d.summary <- data.frame(t(rbind(
colMeans(m.fit.jags.coda),
apply(m.fit.jags.coda, 2, function(x) sd(x)),
apply(m.fit.jags.coda, 2, function(x) quantile(x, probs=c(0.025, 0.5, 0.975)))
)))
colnames(d.summary) <- c("Mean", "SD", "2.5%", "Median", "97.5%")
knitr::kable(d.summary, digits=5, align="c", caption="Summary statistics")
d.comparison <- data.frame(
c(d.summary$Mean, 0.25),
c(d.summary$`2.5%`, 0.13),
c(d.summary$`97.5%`, 0.4)
)
View(d.comparison)
d.comparison <- data.frame(
c(d.summary$Mean, 0.25),
c(d.summary$`2.5%`, 0.13),
c(d.summary$`97.5%`, 0.4)
)
colnames(d.comparison) <- c("Mean", "2.5%", "97.5%")
rownames(d.comparison) <- c("Meta-analysis", "Baeten's study")
knitr::kable(d.comparison, digits=3, align="c")
d.comparison <- data.frame(
c(d.summary$Mean, 0.25),
c(d.summary$`2.5%`, 0.13),
c(d.summary$`97.5%`, 0.4)
)
colnames(d.comparison) <- c("Mean", "2.5%", "97.5%")
rownames(d.comparison) <- c("Meta-analysis", "Baeten's study")
knitr::kable(d.comparison, digits=3, align="c", caption="Comparision")
## Set seed for reproducible results
set.seed(44566)
## Monte Carlo sample size
M <- 100000
## Generate i.i.d. random samples
p.p <- rbeta(M, shape1=11, shape2=32)  # response rate in Placebo
p.t <- rbeta(M, shape1=0.5, shape2=1)  # response rate in Treatment
## Construct response rate difference (RRD)
rrd <- p.t - p.p
ggplot(data.frame(Difference=rrd), aes(x=Difference, y=..density..)) +
geom_histogram(position="identity", bins=50, alpha=0.2, color="white", fill=4) +
geom_density(alpha=0.2, color=4) + geom_vline(xintercept=0, color=2) + theme_minimal() +
labs(title="Histogram/density of the response rate difference", y="Density")
ggplot(with(density(rrd), data.frame(x, y)), aes(x=x, y=y)) +
geom_area(aes(x=ifelse(x>0, x, 0), y=y), fill=4, alpha=0.2) +
geom_line(color=4) + geom_vline(xintercept=0, color=2) +
labs(title="Density plot of response rate difference", x="Difference", y="Density") +
geom_text(aes(x=0.3, y=0.3), label="P(RDD>0)", color=4, check_overlap=TRUE) +
ylim(0, 2) + theme_minimal()
mean(rrd>0)
sqrt(var(rrd>0)/M)
## Posterior probability of superiority of treatment over placebo
pps <- mean(rrd>0); pps
pps.se <- sqrt(var(rrd>0)/M); pps.se
## 99% confidence interval
c(pps-3*pps.se, pps+3*pps.se)
d.summary <- data.frame(t(rbind(
colMeans(m.fit.jags.coda),
apply(m.fit.jags.coda, 2, function(x) sd(x)),
apply(m.fit.jags.coda, 2, function(x) var(x)),
apply(m.fit.jags.coda, 2, function(x) quantile(x, probs=c(0.025, 0.5, 0.975)))
)))
colnames(d.summary) <- c("Mean", "SD", "Variance", "2.5%", "Median", "97.5%")
knitr::kable(d.summary, digits=5, align="c", caption="Summary statistics")
estBetaParams(mean=d.summary$Mean, var=d.summary$Variance)
## Moment matching function
estBetaParams <- function(mean, var) {
alpha <- ((1 - mean) / var - 1 /mean) * mean ^ 2
beta <- alpha * (1 / mean - 1)
return(params = c(alpha=alpha, beta=beta))
}
estBetaParams(mean=d.summary$Mean, var=d.summary$Variance)
rank(c(3, 5, 1, 4, 2, 9))
?rank
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(lang="us_en")
rm(list=ls())
x <- c(0.0028, 0.0028, 0.0056, 0.0112, 0.0225, 0.0450)
# the centered covariate values (centered dose) from the Mice data from Collett
x_centered <- x - mean(x)
# number of mice deaths
# y <- c(35, 21, 9, 6, 1)
y <- c(26, 9, 21, 9, 6, 1)
# total number of mice
# n <- c(40, 40, 40, 40, 40)
n <- c(28, 12, 40, 40, 40, 40)
d.mice <- data.frame(
x, y, n, x_centered, y/n
)
colnames(d.mice) <- c("$x$", "$y$", "$n$", "centered $x$", "$p$")
knitr::kable(d.mice, align="c", caption="Mice data from Collett (2003)")
## Disaggregate the data
d.mice1 <- data.frame(Response=rep(c(1, 0), c(sum(y), sum(n)-sum(y))),
CenteredDose=c(rep(round(x_centered, 5), y),
rep(round(x_centered, 5), n-y)))
knitr::kable(table(d.mice1))
mosaicplot(CenteredDose ~ Response, data=d.mice1, color=2:3,
main="Mosaic Plot", xlab="Centered Dosage")
library(rjags)
library(coda)
## Generate data list for JAGS
dat.jags <- with(d.mice1, list(y=Response, x=CenteredDose))
## Initialize starting points (let JAGS initialize) and set seed
inits.jags <- list(list(.RNG.name="base::Wichmann-Hill", .RNG.seed=314159),
list(.RNG.name="base::Marsaglia-Multicarry", .RNG.seed=159314),
list(.RNG.name="base::Super-Duper", .RNG.seed=413159),
list(.RNG.name="base::Mersenne-Twister", .RNG.seed=143915))
## Compile JAGS model
model1.jags <- jags.model(
file = "LogitModel.txt",
data = dat.jags,
inits = inits.jags,
n.chains = 4,
n.adapt = 4000
)
summary(fit1.jags.coda)
summary(fit1.jags.coda)
## Burn-in
update(model1.jags, n.iter = 4000)
## Sampling
fit1.jags.coda <- coda.samples(
model = model1.jags,
variable.names = c("alpha", "beta"),
n.iter = 10000,
thin = 1
)
summary(fit1.jags.coda)
m.fit1.jags.coda <-as.matrix(fit1.jags.coda)
d.summary <- t(rbind(
colMeans(m.fit1.jags.coda),
apply(m.fit1.jags.coda, 2, function(x) sd(x)),
apply(m.fit1.jags.coda, 2, function(x) quantile(x, probs=c(0.025, 0.5, 0.975)))
))
colnames(d.summary) <- c("Mean", "SD", "2.5%", "Median", "97.5%")
knitr::kable(d.summary, align="c", caption="Summary statistics")
hist(rank(m.fit1.jags.coda))
demo <- rank(m.fit1.jags.coda)
View(m.fit1.jags.coda)
hist(demo[1:40000])
rank(c(3, 4, 2, 1, 2, 3))
rank(c(3, 5, 1, 4, 2, 9))
demo
demo <- apply(m.fit1.jags.coda, 2, function(x) rank(x))
View(demo)
hist(demo[, "alpha"])
hist(demo[, "alpha"], breaks=30)
str(demo)
View(d.summary)
length(demo[, "alpha"])
plot(demo[, "alpha"])
hist(demo[, "alpha"][1:20])
hist(demo[, "alpha"][1:100])
hist(demo[, "alpha"][1:1000])
hist(demo[, "alpha"][1:10000])
m.fit1.jags.coda <-as.data.frame(fit1.jags.coda)
class(demo)
d.rank <- apply(m.fit1.jags.coda, 2, function(x) rank(x))
View(d.rank)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(lang="us_en")
rm(list=ls())
x <- c(0.0028, 0.0028, 0.0056, 0.0112, 0.0225, 0.0450)
# the centered covariate values (centered dose) from the Mice data from Collett
x_centered <- x - mean(x)
# number of mice deaths
# y <- c(35, 21, 9, 6, 1)
y <- c(26, 9, 21, 9, 6, 1)
# total number of mice
# n <- c(40, 40, 40, 40, 40)
n <- c(28, 12, 40, 40, 40, 40)
d.mice <- data.frame(
x, y, n, x_centered, y/n
)
colnames(d.mice) <- c("$x$", "$y$", "$n$", "centered $x$", "$p$")
knitr::kable(d.mice, align="c", caption="Mice data from Collett (2003)")
library(rjags)
library(coda)
## Generate data list for JAGS
dat.jags <- list("y"=y, "x"=x_centered, "n"=n)
## Initialize starting points (let JAGS initialize) and set seed
inits.jags <- list(list(.RNG.name="base::Wichmann-Hill", .RNG.seed=314159),
list(.RNG.name="base::Marsaglia-Multicarry", .RNG.seed=159314),
list(.RNG.name="base::Super-Duper", .RNG.seed=413159),
list(.RNG.name="base::Mersenne-Twister", .RNG.seed=143915))
## Compile JAGS model
model1.jags <- jags.model(
file = "LogitModel.txt",
data = dat.jags,
inits = inits.jags,
n.chains = 4,
n.adapt = 4000
)
## Burn-in
update(model1.jags, n.iter = 4000)
## Sampling
fit1.jags.coda <- coda.samples(
model = model1.jags,
variable.names = c("alpha", "beta"),
n.iter = 10000,
thin = 1
)
summary(fit1.jags.coda)
plot(fit1.jags.coda)
View(fit1.jags.coda)
rep(1:3, 2)
rep(1:3, each=2)
d.chains <- data.frame(
Iterations = rep(8001:18000, times=4),
Sample = c(fit1.jags.coda[[1]], fit1.jags.coda[[2]],
fit1.jags.coda[[3]], fit1.jags.coda[[4]]),
Chains = rep(c("chain1", "chain2", "chain3", "chain4"), each=10000)
)
View(d.chains)
fit1.jags.coda[[1]]
fit1.jags.coda[[1]][1:20]
m.fit1.jags.coda <-as.matrix(fit1.jags.coda)
View(m.fit1.jags.coda)
m.fit1.jags.coda[, "alpha"][1:10]
length(m.fit1.jags.coda[, "alpha"])
m.fit1.jags.coda <-as.matrix(fit1.jags.coda)
d.chains <- data.frame(
iterations = rep(8001:18000, times=4),
alpha = m.fit1.jags.coda[, "alpha"],
beta = m.fit1.jags.coda[, "beta"]
chains = rep(c("chain1", "chain2", "chain3", "chain4"), each=10000)
m.fit1.jags.coda <-as.matrix(fit1.jags.coda)
d.chains <- data.frame(
iterations = rep(8001:18000, times=4),
alpha = m.fit1.jags.coda[, "alpha"],
beta = m.fit1.jags.coda[, "beta"],
chains = rep(c("chain1", "chain2", "chain3", "chain4"), each=10000)
)
View(d.chains)
ggplot(d.chains, aes(x=iterations, y=alpha, color=chains)) +
geom_line()
ggplot(d.chains, aes(x=iterations, y=alpha, color=chains)) +
geom_line(alpha=0.2)
ggplot(d.chains, aes(x=iterations, y=alpha, color=chains)) +
geom_line(alpha=0.2) + theme_minimal()
ggplot(d.chains, aes(x=iterations, y=alpha, color=chains)) +
geom_line(alpha=0.5) + theme_minimal()
ggplot(d.chains, aes(x=alpha, y=..density..)) + geom_density()
ggplot(d.chains, aes(x=alpha, y=..density..)) +
geom_density(color="darkblue", fill="lightblue", alpha=0.5) +
labs(title="Density of alpha", y="Density") + theme_minimal()
ggplot(d.chains, aes(x=iterations, y=alpha, color=chains)) + geom_line(alpha=0.5) +
labs(title="Trace of alpha", x="Iterations") + theme_minimal()
ggplot(d.chains, aes(x=alpha, y=..density..)) +
geom_density(color="darkblue", fill="lightblue", alpha=0.5) +
labs(title="Density of alpha", y="Density") + theme_minimal()
ggplot(d.chains, aes(x=iterations, y=beta, color=chains)) + geom_line(alpha=0.5) +
labs(title="Trace of beta", x="Iterations") + theme_minimal()
ggplot(d.chains, aes(x=beta, y=..density..)) +
geom_density(color="darkblue", fill="lightblue", alpha=0.5) +
labs(title="Density of beta", y="Density") + theme_minimal()
mcmc_rank_hist(fit1.jags.coda)
library(bayesplot)
library(stableGR)
mcmc_rank_hist(fit1.jags.coda)
?apply
length(m.fit1.jags.coda[, "alpha"])
m.fit1.jags.coda <-as.matrix(fit1.jags.coda)
d.chains <- data.frame(
iterations = rep(8001:18000, times=4),
alpha = m.fit1.jags.coda[, "alpha"],
beta = m.fit1.jags.coda[, "beta"],
chains = rep(c("chain1", "chain2", "chain3", "chain4"), each=10000),
alphaRanks = rank(m.fit1.jags.coda[, "alpha"]),
betaRanks = rank(m.fit1.jags.coda[, "beta"])
)
View(d.chains)
?subset
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram()
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=40)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=20)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=0)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=90)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30)
ggplot(d.chains[10001:20000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30)
View(d.chains)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=2, fill=2)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=2, fill=2, alpha=0.5)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=10, color=2, fill=2, alpha=0.5)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=2, fill=2, alpha=0.5)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=2, fill=2, alpha=0.5) +
labs(title="Rank plot of alpha (chain1)") + theme_minimal()
ggplot(d.chains[10001:20000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=3, fill=3, alpha=0.5) +
labs(title="Rank plot of alpha (chain2)") + theme_minimal()
ggplot(d.chains[20001:30000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=4, fill=4, alpha=0.5) +
labs(title="Rank plot of alpha (chain3)") + theme_minimal()
ggplot(d.chains[30001, 40000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=5, fill=5, alpha=0.5) +
labs(title="Rank plot of alpha (chain4)") + theme_minimal()
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=2, fill=2, alpha=0.5) +
labs(title="Rank plot of alpha (chain1)") + theme_minimal()
ggplot(d.chains[10001:20000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=3, fill=3, alpha=0.5) +
labs(title="Rank plot of alpha (chain2)") + theme_minimal()
ggplot(d.chains[20001:30000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=4, fill=4, alpha=0.5) +
labs(title="Rank plot of alpha (chain3)") + theme_minimal()
ggplot(d.chains[30001:40000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=5, fill=5, alpha=0.5) +
labs(title="Rank plot of alpha (chain4)") + theme_minimal()
?rank
d.chains <- data.frame(
iterations = rep(8001:18000, times=4),
alpha = m.fit1.jags.coda[, "alpha"],
beta = m.fit1.jags.coda[, "beta"],
chains = rep(c("chain1", "chain2", "chain3", "chain4"), each=10000),
alphaRanks = rank(m.fit1.jags.coda[, "alpha"], ties.method="average"),
betaRanks = rank(m.fit1.jags.coda[, "beta"], ties.method="average")
)
ggplot(d.chains[1:10000, ], aes(x=alphaRanks)) +
geom_histogram(bins=30, color=2, fill=2, alpha=0.5) +
labs(title="Rank plot of alpha (chain1)") + theme_minimal()
q()
